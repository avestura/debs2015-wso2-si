@App:name('DebsQuery2')
@App:description('Queries for DEBS Query 2')

@source(type = 'http-service', source.id="get-trip", receiver.url = "http://0.0.0.0:8006/q2", basic.auth.enabled = "false",
	@map(type = 'json', @attributes(    MessageId='trp:messageId',
                                        Medallion='$.event.Medallion',
                                        PickupTime='$.event.PickupTime',
                                        DropoffTime='$.event.DropoffTime',
                                        PickCell='$.event.PickCell',
                                        DropCell='$.event.DropCell',
                                        EventTimestamp='$.event.EventTimestamp',
                                        PickupTimeOrig='$.event.PickupTimeOrig',
                                        DropoffTimeOrig='$.event.DropoffTimeOrig',
                                        FareAmount='$.event.FareAmount',
                                        TipAmount='$.event.TipAmount'
                                    )))
define stream Trip (
    MessageId string,
    Medallion string,
    PickupTime long,
    DropoffTime long,
    PickCell string,
    DropCell string,
    EventTimestamp long,
    PickupTimeOrig string,
    DropoffTimeOrig string,
    FareAmount float,
    TipAmount float
);


define stream OutputStream (
    PickupDatetime string,     --Diffrent from Query1 Result class
    DropoffDatetime string,    --why emptyTaxiesCellIds are float?
    ProfitableCellId1 string, EmptyTaxiesInCellId1 float, MedianProfitInCellId1 float, ProfitabilityOfCell1 float,
    ProfitableCellId2 string, EmptyTaxiesInCellId2 float, MedianProfitInCellId2 float, ProfitabilityOfCell2 float,
    ProfitableCellId3 string, EmptyTaxiesInCellId3 float, MedianProfitInCellId3 float, ProfitabilityOfCell3 float,
    ProfitableCellId4 string, EmptyTaxiesInCellId4 float, MedianProfitInCellId4 float, ProfitabilityOfCell4 float,
    ProfitableCellId5 string, EmptyTaxiesInCellId5 float, MedianProfitInCellId5 float, ProfitabilityOfCell5 float,
    ProfitableCellId6 string, EmptyTaxiesInCellId6 float, MedianProfitInCellId6 float, ProfitabilityOfCell6 float,
    ProfitableCellId7 string, EmptyTaxiesInCellId7 float, MedianProfitInCellId7 float, ProfitabilityOfCell7 float,
    ProfitableCellId8 string, EmptyTaxiesInCellId8 float, MedianProfitInCellId8 float, ProfitabilityOfCell8 float,
    ProfitableCellId9 string, EmptyTaxiesInCellId9 float, MedianProfitInCellId9 float, ProfitabilityOfCell9 float,
    ProfitableCellId10 string, EmptyTaxiesInCellId10 float, MedianProfitInCellId10 float, ProfitabilityOfCell10 float,
    Delay float);


define function frequentK[JAVASCRIPT] return object {
    var pickCell = data[0];
    var dropCell = data[1];
    var maxToKeep = 10;
    var timeStamp = data[2];

    return {
        "name": "aaa",
        "timeStamp": timeStamp
    };
};

@sink(type='file', @map(type='json'), file.uri='C:/foo/low_productions.txt')
@sink(type='http-service-response', @map(type='json' ), source.id="get-trip", message.id='{{MessageId}}')
define stream myStream (MessageId string, obj object);

@info(name = 'get count stream queryy')
from Trip#window.externalTime(DropoffTime, 30 min)
select MessageId, PickCell , DropCell,  PickupTimeOrig, DropoffTimeOrig, EventTimestamp
insert all events  into countStream;

from countStream
    select MessageId , frequentK(PickCell, DropCell, EventTimestamp) as obj
    insert all events into myStream;


-- @info(name = 'Main Query')
-- from countStream
--select frequentK(PickCell, DropCell, EventTimestamp) as
 --insert all into OutputStream;

-- from recentCountStream select pickup_datetime_org, dropoff_datetime_org, startCell1 ,endCell1, startCell2, endCell2, startCell3 ,endCell3, startCell4, endCell4, startCell5, endCell5, startCell6, endCell6,
-- startCell7 ,endCell7 , startCell8, endCell8, startCell9, endCell9, startCell10, endCell10, iij_timestamp
-- insert into outputStream


